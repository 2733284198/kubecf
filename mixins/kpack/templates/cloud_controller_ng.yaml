{{- include "_config.load" $ }}
{{- if .Values.features.eirini.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: disable-cc-bosh-release
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/component: operations
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
data:
  ops: |-
    - type: remove
      path: /instance_groups/name=api

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "cloud-controller-config"
  namespace: {{ .Release.Namespace }}
data:
  cloud_controller_ng.yml: |
    local_route: 0.0.0.0

    external_port: 9022
    tls_port: 9023
    readiness_port:
      cloud_controller_worker: 4444
      deployment_updater: 4445
      clock: 4446

    fluent:
      host: "fluentd-forwarder-ingress"
      port: 24224

    internal_service_hostname: cloud_controller_ng.{{ .Release.Namespace }}.svc.cluster.local
    internal_service_port: 9023

    pid_filename: cloud_controller_ng.pid
    newrelic_enabled: false
    development_mode: false

    external_protocol: https
    external_domain: ((system_domain))
    temporary_disable_deployments: false
    temporary_use_logcache: true
    temporary_disable_v2_staging: true

    system_domain_organization: system
    system_domain: ((system_domain))
    #app_domains: {{ .Values.app_domains }}

    reserved_private_domains: "/dev/null"
    disable_private_domain_cross_space_context_path_route_sharing: false

    jobs:
      global:
        timeout_in_seconds: 14400

    default_app_memory: 1024
    default_app_disk_in_mb: 1024
    maximum_app_disk_in_mb: 2048

    instance_file_descriptor_limit: 16384

    request_timeout_in_seconds: 900

    nginx:
      use_nginx: true
      #! TODO: consume this from a variable since it's defined in the pod's mounts
      instance_socket: "/data/cloud_controller_ng/cloud_controller.sock"

    index: 0
    name: ""
    route_services_enabled: true
    volume_services_enabled: true

    info:
      name: ""
      build: ""
      version: 0
      support_address: ""
      description: ""
      min_cli_version: "7.0.1"
      min_recommended_cli_version: "7.0.1"
      #! app SSH is not yet supported in cf-for-k8s
      app_ssh_endpoint: ""
      app_ssh_host_key_fingerprint: ""
      app_ssh_oauth_client: ""

    directories:
      tmpdir: /tmp/
      diagnostics: /cloud_controller_ng/diagnostics/

    logging:
      file: /dev/stdout
      syslog: vcap.cloud_controller_ng
      level: error
      max_retries: 1

    logcache:
      host: metric-proxy
      port: 8080
      temporary_ignore_server_unavailable_errors: true

    log_stream:
      # TODO: What should this be?
      url: https://log-stream.((system_domain))

    doppler:
      url: wss://doppler.{{ .Release.Namespace }}.svc.cluster.local:8082

    telemetry_log_path: "/dev/null"
    log_cache:
      url: "https://log-cache.{{ .Release.Namespace }}.svc.cluster.local:8080"
    threadpool_size: 20
    internal_route_vip_range: ""

    login:
      url: "https://login.(( system_domain ))"
    uaa:
      url: "https://uaa.(( system_domain ))"
      internal_url: "https://uaa.{{ .Release.Namespace }}.svc.cluster.local:8080"
      resource_id: cloud_controller,cloud_controller_service_permissions
      client_timeout: 60

    credential_references:
      interpolate_service_bindings: false

    staging:
      timeout_in_seconds: 900
      minimum_staging_memory_mb: 1024
      minimum_staging_disk_mb: 4096
      minimum_staging_file_descriptor_limit: 16384

    default_health_check_timeout: 60
    maximum_health_check_timeout: 180

    stacks_file: config/stacks.yml

    shared_isolation_segment_name: shared

    quota_definitions: {"default":{"memory_limit":102400,"non_basic_services_allowed":true,"total_routes":1000,"total_services":-1,"total_reserved_route_ports":100}}
    default_quota_definition: default

    resource_pool:
      resource_directory_key: #@ data.values.blobstore.resource_directory_key
      blobstore_type: fog
      fog_connection:
        provider: AWS
        endpoint: #@ data.values.blobstore.endpoint
        aws_access_key_id: #@ data.values.blobstore.access_key_id
        aws_signature_version: #@ data.values.blobstore.aws_signature_version
        region: #@ data.values.blobstore.region
        path_style: true
      minimum_size: 65536
      maximum_size: 536870912

      fog_aws_storage_options: {}

    packages:
      app_package_directory_key: #@ data.values.blobstore.package_directory_key
      blobstore_type: fog
      fog_connection:
        provider: AWS
        endpoint: #@ data.values.blobstore.endpoint
        aws_access_key_id: #@ data.values.blobstore.access_key_id
        aws_signature_version: #@ data.values.blobstore.aws_signature_version
        region: #@ data.values.blobstore.region
        path_style: true
      max_valid_packages_stored: 5
      max_package_size: 1073741824
      fog_aws_storage_options: {}
      image_registry: {
        base_path: #@ data.values.kpack.registry.repository_prefix
      }

    registry_buddy:
      host: 127.0.0.1
      port: 8080

    droplets:
      droplet_directory_key: #@ data.values.blobstore.droplet_directory_key
      blobstore_type: fog
      fog_connection:
        provider: AWS
        endpoint: #@ data.values.blobstore.endpoint
        aws_access_key_id: #@ data.values.blobstore.access_key_id
        aws_signature_version: #@ data.values.blobstore.aws_signature_version
        region: #@ data.values.blobstore.region
        path_style: true

      fog_aws_storage_options: {}
      max_staged_droplets_stored: 5

    buildpacks:
      buildpack_directory_key: #@ data.values.blobstore.buildpack_directory_key
      blobstore_type: fog
      fog_connection:
        provider: AWS
        endpoint: #@ data.values.blobstore.endpoint
        aws_access_key_id: #@ data.values.blobstore.access_key_id
        aws_signature_version: #@ data.values.blobstore.aws_signature_version
        region: #@ data.values.blobstore.region
        path_style: true

      fog_aws_storage_options: {}

    database_encryption:
      current_key_label: encryption_key_0
      pbkdf2_hmac_iterations: 2048

    disable_custom_buildpacks: true

    broker_client_timeout_seconds: 60
    broker_client_default_async_poll_interval_seconds: 60
    broker_client_max_async_poll_duration_minutes: 10080
    renderer:
      max_results_per_page: 100
      default_results_per_page: 50
      max_inline_relations_depth: 2

    cloud_controller_username_lookup_client_name: "cloud_controller_username_lookup"

    allow_app_ssh_access: false
    default_app_ssh_access: false

    skip_cert_verify: false

    install_buildpacks: []

    app_bits_upload_grace_period_in_seconds: 1200

    security_group_definitions: [{"name":"public_networks","rules":[{"destination":"0.0.0.0-9.255.255.255","protocol":"all"},{"destination":"11.0.0.0-169.253.255.255","protocol":"all"},{"destination":"169.255.0.0-172.15.255.255","protocol":"all"},{"destination":"172.32.0.0-192.167.255.255","protocol":"all"},{"destination":"192.169.0.0-255.255.255.255","protocol":"all"}]},{"name":"dns","rules":[{"destination":"0.0.0.0/0","ports":"53","protocol":"tcp"},{"destination":"0.0.0.0/0","ports":"53","protocol":"udp"}]}]
    default_running_security_groups: ["public_networks","dns"]
    default_staging_security_groups: ["public_networks","dns"]

    allowed_cors_domains: []

    statsd_host: 127.0.0.1
    statsd_port: 9125

    security_event_logging:
      enabled: false
      file: "/dev/null"

    system_hostnames: ["api", "uaa", "login", "log-cache"]

    bits_service:
      enabled: false

    rate_limiter:
      enabled: false
      general_limit: 2000
      unauthenticated_limit: 100
      reset_interval_in_minutes: 60

    opi:
      url: "http://eirini-opi.{{ .Release.Namespace }}.svc.cluster.local:8085"
      opi_staging: true
      enabled: true
      cc_uploader_url: "https://TODO.TODO"

    perm:
      enabled: false

    max_labels_per_resource: 50
    max_annotations_per_resource: 200
    custom_metric_tag_prefix_list: ["metric.tag.cloudfoundry.org"]

    default_app_lifecycle: kpack

    kubernetes:
      host_url: https://kubernetes.default
      service_account:
        token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      workloads_namespace: {{ .Values.kpack.workloads_namespace }}
      kpack:
        builder_namespace: {{ .Values.kpack.builder_namespace }}
        registry_service_account_name: {{ .Values.kpack.builder_namespace }}
        registry_tag_base: {{ .Values.kpack.registry_tag_base }}

    perform_blob_cleanup: true

    app_usage_events:
      cutoff_age_in_days: 31
    audit_events:
      cutoff_age_in_days: 31
    failed_jobs:
      cutoff_age_in_days: 31
    completed_tasks:
      cutoff_age_in_days: 31
    service_usage_events:
      cutoff_age_in_days: 31
    max_retained_deployments_per_app: 100
    max_retained_builds_per_app: 100
    max_retained_revisions_per_app: 100
    diego_sync:
      frequency_in_seconds: 15
    pending_builds:
      frequency_in_seconds: 300
      expiration_in_seconds: 42
    pending_droplets:
      frequency_in_seconds: 300
      expiration_in_seconds: 42

    deployment_updater:
      update_frequency_in_seconds: 1

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "cloud-controller-ng"
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      name: "cloud-controller-ng"
  template:
    metadata:
      labels:
        name: cloud-controller-ng
    spec:
      dnsPolicy: "ClusterFirst"
      volumes:
      - name: cloud-controller-config
        projected:
          sources:
          - secret:
              name: cloud-controller-secrets
              items:
                - key: secrets.yml
                  path: secrets.yml
          - configMap:
              name: cloud-controller-config
              items:
                - key: cloud_controller_ng.yml
                  path: cloud_controller_ng.yml

      securityContext:
        runAsNonRoot: true
      containers:
      - name: cloud-controller-ng
        # TODO: Make this image configurable
        image: cloudfoundry/cloud-controller-ng:latest
        imagePullPolicy: Always
        volumeMounts:
        - name: cloud-controller-config
          mountPath: "/config"
        ports:
        - containerPort: 8085
          name: https
#        resources:
#          requests:
#            cpu: 20m
#            memory: 20Mi

---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksSecret
metadata:
  name: cc-secrets
  namespace: {{ .Release.Namespace }}
spec:
  # Define the QuarksSecret type
  type: templatedconfig
  # The new secret name which will have the templated config
  secretName: cloud-controller-secrets
  request:
    templatedConfig:
      type: helm
      values:
        cc_db_password:
          name: "var-cc-database-password"
          key: "password"
      templates:
        secrets.yml: |
          db: &db
            database:
              adapter: mysql
              host: database.{{ .Release.Namespace }}.svc.cluster.local
              port: 3306
              user: {{ printf "{{ .Values.cc_db_password }}" }}
              password: {{ printf "{{ .Values.cc_db_password }}" }}
              database: {{ printf "{{ .Values.cc_db_password }}" }}

            max_connections: 25
            pool_timeout: 10
            log_level: "debug2"
            log_db_queries: false
            read_timeout: 3600
            connection_validation_timeout: 3600
            #@ if data.values.ccdb.ca_cert:
            ca_cert_path: "/config/database/certs/ca.crt"
            ssl_verify_hostname: true
            #@ else:
            ssl_verify_hostname: false
            #@ end
{{- end }}
