# The config.yaml file is a collection of settings one might want to change
# if they are deploying a second copy of the kubecf pipeline.
# It is meant to provide a way to not pollute the "production" resources with
# data from testing and developing the pipeline.
# The production pipeline should always be deployed without a config.yaml.
# This will use the same (default) values every time, so people deploying it
# don't have to know what kind of values were used when it was deployed last
# time.

# Variables
{{ $availableCfSchedulers := slice "diego" }} # Diego / Eirini
{{ $pr_resources := slice }}
{{ $branches := slice "v2.2.0" }} # Repository branches to track

# Prod and no-prod jobs
# Jobs that are stable and ready should go into $prod.

# Production ready Jobs
# cf-acceptance-tests-* and smoke-test-* are a Special case, as Eirini is not ready, we don't want smoke/CATs to end up in prod job view.
# TODO: Delete the special case here as soon as we get Eirini CATS green and we stabilize Eirini smoke (e.g. with a more large timeout)

{{ $prod := slice }}
{{ $noprod := slice "cf-acceptance-tests-diego" "smoke-tests-diego" }}

# Add jobs for each scheduler in the correct category
{{range $_, $cfScheduler := $availableCfSchedulers }}

  # Generate the prod slice in the range, so we have the full list for the tab view group
  {{ $noprod = $noprod | append ( printf "deploy-%s" $cfScheduler ) }}


  # Cleanup gets executed only at the end, make it into noprod as we need to keep it at the end
  {{ $noprod = $noprod | append ( printf "cleanup-%s-cluster" $cfScheduler ) }}
{{ end }}

{{ $group_prod := slice }}
{{ $group_noprod := slice }}
{{ $group_all := slice }}

{{ range $_, $branch := (flatten (slice $branches $pr_resources) | uniq ) }}
{{ range $_, $test := $prod }}
  {{ $group_prod = $group_prod | append ( printf "%s-%s" $test $branch ) }}
  {{ $group_all = $group_all | append ( printf "%s-%s" $test $branch ) }}
{{ end }}
{{ range $_, $test := $noprod }}
  {{ $group_noprod = $group_noprod | append ( printf "%s-%s" $test $branch ) }}
  {{ $group_all = $group_all | append ( printf "%s-%s" $test $branch ) }}
{{ end }}
{{ end }}

groups:
- name: prod
  jobs: [ {{ join $group_prod "," }} ]

- name: no-prod
  jobs: [ {{ join $group_noprod "," }} ]

- name: all
  # Joins prod and noprod with a "," while filtering elements making them uniques.
  jobs: [ {{ join $group_all "," }} ]

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release

resources:

- name: 1h
  type: time
  source: {interval: 5m}

- name: kind-environments
  type: pool
  source:
    uri: git@github.com:SUSE/cf-ci-pools.git
    branch: kubecf-kind-pools
    pool: kind
    private_key: ((github-private-key))


{{- range $_, $branch := $branches }}
- name: kubecf-{{ $branch }}
  type: git
  source:
    branch: {{ $branch }}
    uri: https://github.com/{{ if has . "kubecf_repository" }}{{ .kubecf_repository }}{{ else }}{{ "cloudfoundry-incubator/kubecf" }}{{ end }}
{{ end }}



- name: catapult
  type: git
  source:
    uri: https://github.com/SUSE/catapult
  version:
    ref: d1ea00e409bb5dd75055da1fda174875fc17b773

- name: s3.kubecf-ci
  type: s3
  source:
    bucket: {{ if has . "s3_bucket" }}{{ .s3_bucket }}{{ else }}kubecf-ci{{ end }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ if has . "s3_bucket_region" }}{{ .s3_bucket_region }}{{ else }}"eu-central-1"{{ end }}
    regexp: kubecf-v(.*).tgz

- name: s3.kubecf-ci-bundle
  type: s3
  source:
    bucket: {{ if has . "s3_bucket" }}{{ .s3_bucket }}{{ else }}kubecf-ci{{ end }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ if has . "s3_bucket_region" }}{{ .s3_bucket_region }}{{ else }}"eu-central-1"{{ end }}
    regexp: kubecf-bundle-v(.*).tgz

deploy_args: &deploy_args
- -ce
- |
  export SCF_LOCAL="${PWD}/kubecf"
  export SCF_CHART="$(readlink -f s3.kubecf-ci/*.tgz)"
  export SCF_OPERATOR=true
  export FORCE_DELETE=true
  export HELM_VERSION="v3.1.1"
  export SCF_TESTGROUP=true
  export BACKEND=imported
  export DOCKER_ORG=cap-staging
  export QUIET_OUTPUT=true
  export DOWNLOAD_CATAPULT_DEPS=false
  export CLUSTER_NAME="$(cat kind-environments/name)"
  export KUBECFG="$(readlink -f kind-environments/metadata)"

  # https://unix.stackexchange.com/a/265151
  read -r -d '' CONFIG_OVERRIDE <<'EOF' || true
  sizing:
    diego_cell:
      ephemeral_disk:
        size: 300000
  EOF
  export CONFIG_OVERRIDE

  SERVER=$(yq r $KUBECFG 'clusters[0].cluster.server')
  echo
  echo
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo "Job running on server $SERVER"
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo
  echo

  pushd catapult
  # Bring up a k8s cluster and builds+deploy kubecf
  # https://github.com/SUSE/catapult/wiki/Build-and-run-SCF#build-and-run-kubecf
  make kubeconfig scf

test_args: &test_args
- -ce
- |
  export BACKEND=imported
  export KUBECF_TEST_SUITE="${TEST_SUITE:-smokes}"
  export SCF_LOCAL="${PWD}/kubecf"
  export KUBECF_NAMESPACE="scf"
  export QUIET_OUTPUT=true
  export DOWNLOAD_CATAPULT_DEPS=false
  export CLUSTER_NAME="$(cat kind-environments/name)"
  export KUBECFG="$(readlink -f kind-environments/metadata)"
  export KUBECF_CHECKOUT="${SCF_LOCAL}"

  SERVER=$(yq r $KUBECFG 'clusters[0].cluster.server')
  echo
  echo
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo "Job running on server $SERVER"
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo
  echo

  pushd catapult
  # Grabs back a deployed cluster and runs test suites on it
  # See: https://github.com/SUSE/catapult/wiki/Running-SCF-tests#kubecf
  make kubeconfig tests-kubecf

rotate_args: &rotate_args
- -ce
- |
  export BACKEND=imported
  export KUBECF_NAMESPACE="scf"
  export QUIET_OUTPUT=true
  export DOWNLOAD_CATAPULT_DEPS=false
  export CLUSTER_NAME="$(cat kind-environments/name)"
  export KUBECFG="$(readlink -f kind-environments/metadata)"
  export KUBECF_CHECKOUT="${PWD}/kubecf"
  export KUBECF_INSTALL_NAME="susecf-scf"

  SERVER=$(yq r $KUBECFG 'clusters[0].cluster.server')
  echo
  echo
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo "Job running on server $SERVER"
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo
  echo

  pushd catapult
  make kubeconfig
  source build*/.envrc

  pushd "${KUBECF_CHECKOUT}"
  testing/ccdb_key_rotation/rotate-ccdb-keys-test.sh

jobs:

{{ $path := "" }}
{{- range $_, $branch := flatten (slice $branches $pr_resources)  }}

{{ if or (eq $branch "fork-pr") (eq $branch "pr" )}}
{{ $path = ".git/resource/head_sha" }}
{{ else }}
{{ $path = ".git/short_ref" }}
{{ end }}

{{ $sanitized_branch_name := replaceAll "." "_" $branch }}


{{- range $_, $cfScheduler := $availableCfSchedulers }}

# prod-jobs
- name: deploy-{{ $cfScheduler }}-{{ $branch }}
  #max_in_flight: 1 # Re-enable to when we want to set a limit on concurrent deployments
  public: true
  # Consider adding a serial_group between the two $cfScheduler
  # if jobs starts to starve
  plan:
  - get: 1h
    trigger: true
  - put: kind-environments
    params: {acquire: true}
    timeout: 8h # Timeout should be long at least for the full pipeline to complete
  - get: kubecf-{{ $branch }}
  - get: s3.kubecf-ci
    passed:
  - get: s3.kubecf-ci-bundle
  - get: catapult
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
  - put: status-{{ $branch }}.src
    params: &deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "deploy-{{ $cfScheduler }}"
        description: "Deploy {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: deploy
    timeout: 3h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: kubecf
      - name: kind-environments
      - name: catapult
      - name: s3.kubecf-ci
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        CATS_NODES: 4
        ENABLE_EIRINI: {{ eq $cfScheduler "eirini" }}
        CLUSTER_NAME_PREFIX: kubecf-{{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *deploy_args
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}
  on_failure:
    do:
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
    - task: cleanup-cluster
      config: &cleanup-cluster
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: splatform/catapult
        inputs:
        - name: kind-environments
        params:
          CLUSTER_NAME_PREFIX: "kubecf-{{ $cfScheduler }}"
          EKCP_HOST: ((ekcp-host))
        run:
          path: "/bin/bash"
          args:
          - -ce
          - |
            export CLUSTER_NAME="$(cat kind-environments/name)"
            curl -X DELETE -s "http://${EKCP_HOST}/${CLUSTER_NAME}" | jq -r .Output
    - put: kind-environments
      params: { remove : kind-environments}
  on_abort:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
    - put: kind-environments
      params: { remove : kind-environments}
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_error:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
    - put: kind-environments
      params: { remove : kind-environments}
{{- if has $prod (printf "deploy-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}

{{ $previousTest := "" }}

- name: smoke-tests-{{ $cfScheduler }}-{{ $branch }}
  public: true
  plan:
  - get: kind-environments
    trigger: true
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: kubecf-{{ $branch }}
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: s3.kubecf-ci
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: s3.kubecf-ci-bundle
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: catapult
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
  - put: status-{{ $branch }}.src
    params: &smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "smoke-tests-{{ $cfScheduler }}"
        description: "Smoke tests {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: test-{{ $cfScheduler }}
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kind-environments
      - name: kubecf
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        TEST_SUITE: smokes
        CLUSTER_NAME_PREFIX: kubecf-{{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *test_args
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}
  on_failure:
    do:
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
    - put: kind-environments
      params: { remove : kind-environments}
  on_abort:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
    - put: kind-environments
      params: { remove : kind-environments}
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_error:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
    - put: kind-environments
      params: { remove : kind-environments}
{{- if has $prod (printf "smoke-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
{{ $previousTest = (printf "smoke-tests-%s-%s" $cfScheduler $branch) }}

- name: cf-acceptance-tests-{{ $cfScheduler }}-{{ $branch }}
  public: true
  plan:
  - get: kind-environments
    trigger: true
    passed:
    - {{ $previousTest | quote }}
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: catapult
{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
  - put: status-{{ $branch }}.src
    params: &cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "cf-acceptance-tests-{{ $cfScheduler }}"
        description: "Acceptance tests {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
{{- end }}
  - task: test-{{ $cfScheduler }}
    timeout: 5h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kind-environments
      - name: kubecf
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        TEST_SUITE: cats
        CLUSTER_NAME_PREFIX: kubecf-{{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *test_args

{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}

  on_failure:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
    - put: kind-environments
      params: { remove : kind-environments}
{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_abort:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
    - put: kind-environments
      params: { remove : kind-environments}
{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
  on_error:
    do:
    - task: cleanup-cluster
      config:
        <<: *cleanup-cluster
    - put: kind-environments
      params: { remove : kind-environments}
{{- if has $prod (printf "cf-acceptance-tests-%s" $cfScheduler) }}
    - put: status-{{ $branch }}.src
      params:
        << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: failure
{{- end }}
{{ $previousTest = (printf "cf-acceptance-tests-%s-%s" $cfScheduler $branch) }}

# no-proVd jobs



- name: cleanup-{{ $cfScheduler }}-cluster-{{ $branch }}
  public: true
  plan:
  - get: kind-environments
    trigger: true
    passed:
    - {{ $previousTest | quote }}
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  ensure:
   do:
   - task: cleanup-cluster
     config:
       <<: *cleanup-cluster
   - put: kind-environments
     params: { remove : kind-environments}

{{ end }} # of range cfscheduler


{{ end }} # of branch

